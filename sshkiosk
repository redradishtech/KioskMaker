#!/bin/bash -eu
# SSH wrapper to run commands on the kiosk, or establish public key authentication.
# Normally invoked by ./02_kioskify-vm

base="$(dirname "$(readlink -f "$0")")"
sshdir=./copied-to-kiosk/opt/kiosk/template/root/.ssh
sshkey="$sshdir"/kioskbuilder
authorized_keys="$sshdir"/authorized_keys

sshtokiosk() {
	ssh -F ./ssh_config_kioskclient kiosk "$@"
}

usage() {
	echo "Usage:"
	echo "	sshkiosk SSHARGS			# Run a command on the kiosk over SSH. E.g. ./sshkiosk uptime."
	echo "	sshkiosk --init				# Establishes public key authentication with the running kiosk VM."
	echo "	sshkiosk --edit-sshconfig   # Adds 'kiosk' entry to your ~/.ssh/config so 'ssh kiosk' works. Often required - use e.g. rsync -e 'ssh -F ./ssh_config_kioskclient' file kiosk:/tmp"
	echo "SSH wrapper to connec to the kiosk"

}

# Generate a SSH key and scp it to the kiosk, so further operations don't require a password
init() {
	set -x
	# Fix perms even if dir exists
	install -d -m 700 "$sshdir"
	if [[ ! -f $sshkey ]]; then
		echo "Generating a SSH key for 'root' on the kiosk. Press enter to set a blank passphrase (or set one, as you like):"
		ssh-keygen -t ed25519 -C "Generated by kioskbuilder, $(date)" -f "$sshkey"
		[[ -f $authorized_keys ]] || cp "$sshkey.pub" "$authorized_keys"
	fi
	# FIXME: this breaks if the filesystem is ro
	scp -F ./ssh_config_kioskclient -r ./copied-to-kiosk/opt/kiosk/template/root/.ssh kiosk:/root/
	./sshkiosk true || fail "Unable to SSH to kiosk"
}

alter_ssh_config() {
	if [[ ! -f ~/.ssh/config ]] || ! grep -q '^Include .*ssh_config_kioskclient' ~/.ssh/config; then
		echo "Include $base/ssh_config_kioskclient" >> ~/.ssh/config
		echo "Edited ~/.ssh/config to Include $base/ssh_config_kioskclient. Now 'ssh kiosk' should work"
	else
		echo "'kiosk' host already defined in ~/.ssh/config"
	fi
}

case "${1:-}" in
	--help) usage;;
	--init) init;;
	--edit-sshconfig) alter_ssh_config;;
	*) sshtokiosk "$@";;
esac
